import numpy as np

R_ps1 = {'g': {'coeff': [ 3.61562687, -0.0891928 ],
	  'std': 0.004146827352467696},
	 'r': {'coeff': [ 2.58602003, -0.03325315],
	  'std': 0.0010620316190595924},
	 'i': {'coeff': [ 1.90959054, -0.01284678],
	  'std': 0.0004962971568272631},
	 'z': {'coeff': [ 1.50168735, -0.0045642 ],
	  'std': 0.0014331914679903046},
	 'y': {'coeff': [ 1.25340149, -0.00247802],
	  'std': 0.0005840472105137083}}

R_kepler = {'kep': {'coeff': [ 2.68629375, -0.26884456],
	  'std': 0.0020136674269240393}}

R_tess = {'tess': {'coeff': [ 1.902, -0.179],
	  'std': 0.0028265468011445124}}

R_kepcam = {'u': {'coeff': [4.910819610798331, -0.07379004086192983],
			  'std': 0.015944767540348265},
			 'g': {'coeff': [3.6918994351387133, -0.15159673936230922],
			  'std': 0.0036868971351170445},
			 'r': {'coeff': [2.5634594605630965, -0.06301092500356524],
			  'std': 0.001553247628706246},
			 'i': {'coeff': [1.8542320676106367, -0.028787720549461382],
			  'std': 0.0012374389983546125},
			 'z': {'coeff': [1.1872363536634898, -0.04491505867611026],
			  'std': 0.0036942954987055692},
			 'B': {'coeff': [4.112525206655929, -0.1796878289904342],
			  'std': 0.01944092067402502},
			 'V': {'coeff': [3.1333795036182175, -0.06267923671190054],
			  'std': 0.0008742805278449928},
			 'R': {'coeff': [2.403696115403864, -0.09284412124601961],
			  'std': 0.003644803785222388},
			 'I': {'coeff': [1.721876567987191, -0.02471203773320147],
			  'std': 0.0014191264485898874},
			 'Z': {'coeff': [1.2320107198055896, -0.03820842071338424],
			  'std': 0.003790938606688214}}

def line(x, c1, c2): 
    return c1 + c2*x

def R_val(band,instrument,g=None,r=None,gr=None,ext=0):
	if instrument.lower() =='ps1':
		R = R_ps1
	elif instrument.lower() =='kepcam':
		R = R_kepcam
	elif instrument.lower() =='kepler':
		R = R_kepler
	elif instrument.lower() =='tess':
		R = R_tess
	if (g is not None) & (r is not None):
		gr = g-r

	if (gr is None) | np.isnan(gr).all():
		Rb   = R[band]['coeff'][1]
	else:
		Rr0 = R[band]['coeff'][1]
		Rg0 = R[band]['coeff'][1]

		gr_int = gr - ext*(Rg0 - Rr0)

		vals = R[band]['coeff']
		Rb  = line(gr_int,vals[0],vals[1])
	Rb_e = R[band]['std']

	return Rb, Rb_e
