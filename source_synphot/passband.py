# -*- coding: UTF-8 -*-
"""
Instrumental throughput models and calibration and synthetic photometry
routines
"""

from __future__ import absolute_import
from __future__ import unicode_literals
import numpy as np
import pysynphot as S
from . import io
from collections import OrderedDict
from six.moves import zip

def synflux(spec, ind, pb):
    """
    Compute the synthetic flux of spectrum ``spec`` through passband ``pb``

    Parameters
    ----------
    spec : :py:class:`numpy.recarray`
        The spectrum. 
        Must have ``dtype=[('wave', '<f8'), ('flux', '<f8')]``
    ind : array-like 
        Indices of spectrum ``spec`` that overlap with the passband ``pb``.
        Can be produced by :py:meth:`source_synphot.passband.interp_passband`
    pb : array-like
        The passband transmission.
        Must satisfy ``pb.shape == spec[ind].flux.shape``

    Returns
    -------
    flux : float
        The normalized flux of the spectrum through the passband

    Notes
    -----
        The passband is assumed to be dimensionless photon transmission
        efficiency.

        Routine is intended to be a mch faster implementation of
        :py:meth:`pysynphot.observation.Observation.effstim`, since it is called over and
        over by the samplers as a function of model parameters.

        Uses :py:func:`numpy.trapz` for interpolation.

    See Also
    --------
    :py:func:`source_synphot.passband.interp_passband`
    """
    n = np.trapz(spec.flux[ind]*spec.wave[ind]*pb, spec.wave[ind])
    d = np.trapz(spec.wave[ind]*pb, spec.wave[ind])
    out = n/d
    return out


def synphot(spec, ind, pb, zp=0.):
    """
    Compute the synthetic magnitude of spectrum ``spec`` through passband ``pb``

    Parameters
    ----------
    spec : :py:class:`numpy.recarray`
        The spectrum. 
        Must have ``dtype=[('wave', '<f8'), ('flux', '<f8')]``
    ind : array-like 
        Indices of spectrum ``spec`` that overlap with the passband ``pb``.
        Can be produced by :py:meth:`source_synphot.passband.interp_passband`
    pb : array-like
        The passband transmission.
        Must satisfy ``pb.shape == spec[ind].flux.shape``
    zp : float, optional
        The zeropoint to apply to the synthetic flux

    Returns
    -------
    mag : float
        The synthetic magnitude of the spectrum through the passband

    See Also
    --------
    :py:func:`source_synphot.passband.synflux`
    :py:func:`source_synphot.passband.interp_passband`
    """
    flux = synflux(spec, ind, pb)
    m = -2.5*np.log10(flux) + zp
    return m


def get_model_synmags(model_spec, pbs, mu=0.):
    """
    Computes the synthetic magnitudes of spectrum ``model_spec`` through the
    passbands ``pbs``, and optionally applies a common offset, ``mu``

    Wrapper around :py:func:`source_synphot.passband.synphot`.

    Parameters
    ----------
    spec : :py:class:`numpy.recarray`
        The spectrum. 
        Must have ``dtype=[('wave', '<f8'), ('flux', '<f8')]``
    pbs : dict
        Passband dictionary containing the passbands corresponding to
        phot.pb` and generated by :py:func:`source_synphot.passband.get_pbmodel`.
    mu : float, optional
        Common achromatic photometric offset to apply to the synthetic
        magnitudes in al the passbands. Would be equal to the distance modulus
        if ``model_spec`` were normalized to return the true absolute magnitude
        of the source. 

    Returns
    -------
    model_mags : None or :py:class:`numpy.recarray`
        The model magnitudes.
        Has ``dtype=[('pb', 'str'), ('mag', '<f8')]``
    """
    outpb  = []
    outmag = []
    for pbname, pbdata in pbs.items():
        _, transmission, ind, zp, _ = pbdata
        pbsynmag = synphot(model_spec, ind, transmission, zp) + mu
        outmag.append(pbsynmag)
        outpb.append(pbname)
    names=str('pb,mag')
    out = np.rec.fromarrays((outpb, outmag), names=names)
    return out


def interp_passband(wave, pb, model):
    """
    Find the indices of the wavelength array ``wave``, that overlap with the
    passband ``pb`` and interpolates the passband onto the wavelengths.
    
    Parameters
    ----------
    wave : array-like
        The wavelength array. Must satisfy
        :py:meth:`source_synphot.source_synphot.source_synphot._wave_test`
    pb : :py:class:`numpy.recarray`
        The passband transmission.
        Must have ``dtype=[('wave', '<f8'), ('throughput', '<f8')]``
    model : :py:class:`source_synphot.source_synphot.source_synphot` instance
        The DA White Dwarf SED model generator

    Returns
    -------
    transmission : array-like
        The transmission of the passband interpolated on to overlapping
        elements of ``wave``
    ind : array-like 
        Indices of wavelength ``wave`` that overlap with the passband ``pb``.
        Produced by :py:meth:`source_synphot.source_synphot.source_synphot._get_indices_in_range`
        Satisfies ``transmission.shape == wave[ind].shape``

    Notes
    -----
        The passband ``pb`` is interpolated on to the wavelength arrray
        ``wave``. ``wave`` is typically the wavelengths of a spectrum, and have
        much better sampling than passband transmission curves. Only the
        wavelengths ``wave`` that overlap the passband are taken, and the
        passband transmission is then linearly interpolated on to these
        wavelengths. This prescription has been checked against
        :py:mod:`pysynphot` to return synthetic magnitudes that agree to be ``<
        1E-6``, while :py:func:`source_synphot.passband.synphot` is very significantly
        faster than :py:meth:`pysynphot.observation.Observation.effstim`.
    """
    _, ind = model._get_indices_in_range(wave, pb.wave.min(), pb.wave.max())
    transmission = np.interp(wave[ind], pb.wave, pb.throughput, left=0., right=0.)
    return transmission, ind


def chop_syn_spec_pb(spec, model_mag, pb, model):
    """
    Trims the pysynphot bandpass pb to non-zero throughput, computes the
    zeropoint of the passband given the SED spec, and model magnitude of spec
    in the passband

    Parameters
    ----------
    spec : :py:class:`numpy.recarray`
        The spectrum. Typically a standard which has a known ``model_mag``.
        This can be a real source such as Vega, BD+174708, or one of the three
        CALSPEC standards, or an idealized synthetic source such as AB.
        Must have ``dtype=[('wave', '<f8'), ('flux', '<f8')]``
    model_mag : float
        The apparent magnitude of the spectrum through the passband.  The
        difference between the apparent magnitude and the synthetic magnitude
        is the synthetic zeropoint.
    pb : :py:class:`numpy.recarray`
        The passband transmission.
        Must have ``dtype=[('wave', '<f8'), ('throughput', '<f8')]``
    model : :py:class:`source_synphot.source_synphot.source_synphot` instance
        The DA White Dwarf SED model generator

    Returns
    -------
    outpb : :py:class:`numpy.recarray`
        The passband transmission with zero throughput entries trimmed.
        Has ``dtype=[('wave', '<f8'), ('throughput', '<f8')]``
    outzp : float
        The synthetic zeropoint of the passband ``pb`` such that the source
        with spectrum ``spec`` will have apparent magnitude ``model_mag``
        through ``pb``. With the synthetic zeropoint computed, the synthetic
        magnitude of any source can be converted into an apparent magnitude and
        can be passed to :py:func:`source_synphot.passband.synphot`.

    See Also
    --------
    :py:func:`source_synphot.passband.interp_passband`
    :py:func:`source_synphot.passband.synphot`
    """

    # don't bother about zero padding
    mask = np.nonzero(pb.throughput)
    pwave = pb.wave[mask]
    ptput = pb.throughput[mask]
    names = str('wave,throughput')
    outpb = np.rec.fromarrays((pwave, ptput), names=names)

    # interpolate the transmission onto the overlapping wavelengths of the spectrum
    transmission, ind = interp_passband(spec.wave, outpb, model)

    # compute the zeropoint
    outzp = model_mag - synphot(spec, ind, transmission)

    return outpb, outzp


def get_pb_zpt(pb, reference='AB', model_mag=0.):
    # setup the photometric system by defining the standard and corresponding magnitude system
    if reference.lower() not in ('vega', 'ab'):
        message = 'Do not understand mag system reference standard {}. Must be AB or Vega'.format(reference)
        raise RuntimeError(message)
    if reference.lower() == 'ab':
        refspec = S.FlatSpectrum(3631, fluxunits='jy')
        mag_type= 'abmag'
    else:
        refspec    = S.Vega
        mag_type= 'vegamag'

    out = OrderedDict()

    avgwave = pb.avgwave()

    # get the pysynphot Vega magnitude (should be 0. on the Vega magnitude system!)
    ob = S.Observation(refspec, pb)
    synphot_mag = ob.effstim(mag_type)

    # cut the passband to non-zero values and interpolate onto overlapping Vega wavelengths
    outpb, outzp = chop_syn_spec_pb(vega, synphot_mag, bp, model)

    # save everything we need for this passband
    out[pb] = (outpb, transmission, ind, outzp, avgwave)
    return out
